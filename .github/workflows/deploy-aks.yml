name: Deploy to AKS

on:
  push:
    branches: [master, main]
    paths:
      - 'src/**'
      - 'k8s/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-aks.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: shanumathew.azurecr.io
  IMAGE_NAME: react-chatbot
  CLUSTER_NAME: react-chatbot-aks
  CLUSTER_RESOURCE_GROUP: react-chatbot-rg
  NAMESPACE: react-chatbot

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        id: docker_build
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image output
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      - name: Create Namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} || true
          kubectl label namespace ${{ env.NAMESPACE }} purpose=production --overwrite

      - name: Create Image Pull Secret
        run: |
          kubectl create secret docker-registry acr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --docker-password=${{ secrets.AZURE_REGISTRY_PASSWORD }} \
            --docker-email=admin@example.com \
            -n ${{ env.NAMESPACE }} || true

      - name: Update Deployment Image
        run: |
          kubectl set image deployment/react-chatbot \
            react-chatbot=${{ needs.build.outputs.image }} \
            -n ${{ env.NAMESPACE }} || \
          kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}

      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/react-chatbot \
            -n ${{ env.NAMESPACE }} \
            --timeout=5m

      - name: Get Service URL
        id: service
        run: |
          SERVICE_IP=$(kubectl get svc react-chatbot-service \
            -n ${{ env.NAMESPACE }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          echo "url=http://${SERVICE_IP}" >> $GITHUB_OUTPUT

      - name: Get Pod Status
        run: |
          echo "Pod Status:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          echo "Service Status:"
          kubectl get svc -n ${{ env.NAMESPACE }}
          echo ""
          echo "Deployment Status:"
          kubectl get deployment -n ${{ env.NAMESPACE }}

      - name: Check Logs
        if: failure()
        run: |
          kubectl logs -l app=react-chatbot \
            -n ${{ env.NAMESPACE }} \
            --tail=100

      - name: Create Deployment Comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const comment = `${status} AKS Deployment ${status === '✅' ? 'Successful' : 'Failed'}
            
            **Service URL:** ${{ steps.service.outputs.url }}
            **Image:** ${{ needs.build.outputs.image }}
            **Namespace:** ${{ env.NAMESPACE }}
            **Cluster:** ${{ env.CLUSTER_NAME }}
            
            View logs:
            \`\`\`
            kubectl logs -f deployment/react-chatbot -n ${{ env.NAMESPACE }}
            \`\`\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }).catch(() => console.log('No PR to comment on'));

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      - name: Verify Deployment Health
        run: |
          echo "Checking pod health..."
          READY_PODS=$(kubectl get deployment react-chatbot \
            -n ${{ env.NAMESPACE }} \
            -o jsonpath='{.status.readyReplicas}')
          DESIRED_PODS=$(kubectl get deployment react-chatbot \
            -n ${{ env.NAMESPACE }} \
            -o jsonpath='{.spec.replicas}')
          
          if [ "$READY_PODS" -eq "$DESIRED_PODS" ]; then
            echo "✓ All pods are healthy"
          else
            echo "⚠ Only $READY_PODS/$DESIRED_PODS pods are ready"
            exit 1
          fi

      - name: Test Application
        continue-on-error: true
        run: |
          SERVICE_IP=$(kubectl get svc react-chatbot-service \
            -n ${{ env.NAMESPACE }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          if [ ! -z "$SERVICE_IP" ] && [ "$SERVICE_IP" != "pending" ]; then
            echo "Testing endpoint: http://${SERVICE_IP}"
            curl -f -m 5 http://${SERVICE_IP} || echo "Service may still be starting"
          else
            echo "Service IP not yet assigned, skipping test"
          fi
