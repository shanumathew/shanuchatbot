name: Deploy to Azure

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
  IMAGE_NAME: react-chatbot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        id: docker_build
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image tag output
        id: image
        run: echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-aci:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Instances
        uses: azure/container-instances-deploy-action@v1
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          name: ${{ secrets.AZURE_ACI_NAME }}
          image: ${{ needs.build-and-push.outputs.image_tag }}
          registry-login-server: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
          ports: 3000
          cpu: 1
          memory: 1
          environment-variables: NODE_ENV=production

      - name: Get Container URL
        run: |
          FQDN=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_ACI_NAME }} \
            --query ipAddress.fqdn -o tsv)
          echo "Container URL: http://$FQDN:3000"
          echo "CONTAINER_URL=http://$FQDN:3000" >> $GITHUB_ENV

      - name: Create deployment notification
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ **Deployment Successful!**\n\nüåê **Container URL**: ${{ env.CONTAINER_URL }}\n\nüì¶ **Image**: ${{ needs.build-and-push.outputs.image_tag }}\n\n‚è±Ô∏è Deployed at: ${new Date().toLocaleString()}`
            })

  deploy-appservice:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_APPSERVICE_NAME }}
          images: ${{ needs.build-and-push.outputs.image_tag }}
          slot-name: production
          registry-url: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Get App Service URL
        run: |
          URL=$(az webapp show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_APPSERVICE_NAME }} \
            --query defaultHostName -o tsv)
          echo "App Service URL: https://$URL"

  test-deployment:
    needs: deploy-aci
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check container health
        run: |
          STATUS=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_ACI_NAME }} \
            --query containers[0].instanceView.currentState.state -o tsv)
          
          echo "Container Status: $STATUS"
          
          if [ "$STATUS" != "Running" ]; then
            echo "‚ùå Container is not running!"
            exit 1
          fi
          
          echo "‚úÖ Container is healthy"

      - name: View container logs
        if: always()
        run: |
          az container logs \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_ACI_NAME }} \
            --tail 20

  notify:
    needs: [build-and-push, deploy-aci]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-aci.result }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded!"
          else
            echo "‚ùå Deployment failed!"
          fi
