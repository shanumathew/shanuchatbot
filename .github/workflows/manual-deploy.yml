name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Image version/tag'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          echo "ðŸ“‹ Deployment Configuration"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}"

      - name: Deploy to AWS (AppRunner)
        if: secrets.AWS_ACCESS_KEY_ID != '' && github.event.inputs.environment == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Kubernetes
        if: secrets.KUBE_CONFIG_DATA != ''
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
          NAMESPACE=${{ github.event.inputs.environment }}
          kubectl set image deployment/react-chatbot \
            chatbot=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }} \
            -n $NAMESPACE \
            --record || echo "Deployment not found, creating new one..."

      - name: Deploy to Docker Compose
        if: secrets.DEPLOY_HOST != ''
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          
          # Deploy via SSH
          ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /app/react-chatbot
            docker-compose pull
            docker-compose up -d
            docker-compose ps
          EOF

      - name: Verify deployment
        run: |
          echo "âœ… Deployment command sent"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version }}"

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Deployment: ${{ job.status }}
            Environment: ${{ github.event.inputs.environment }}
            Version: ${{ github.event.inputs.version }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
